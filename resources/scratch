https://code.visualstudio.com/api/references/theme-color

"generate" color scheme off current
view "scope" of character

https://stackoverflow.com/questions/30011737/how-to-add-theme-in-visual-studio-code
https://stackoverflow.com/questions/10834765/where-to-find-a-list-of-scopes-for-sublime2-or-textmate
https://marketplace.visualstudio.com/items?itemName=pedro-w.tmlanguage
https://sublime3-docs-zh.readthedocs.io/en/latest/reference/color_schemes.html
https://hashnode.com/post/create-and-publish-a-vs-code-theme-ckz2r72o00n44mjs1d4bkc0fb


#################################################################### files #####

tmtheme-converted is the output of an automatic converstion from tmTheme to JSON.
monokai-no-italic.tmTheme is my original port of the textmate theme
defaul- monokai.json is the generated color scheme of the default vscode monokai
colors.html is the hex of the colors I prefer

################################################################# terminal #####

terminal.sexy
https://chrisyeh96.github.io/2020/03/28/terminal-colors.html
https://www.schemecolor.com/
https://coolors.co/
https://colordesigner.io/
https://meyerweb.com/eric/tools/color-blend/

########################################################## semantic tokens #####

### https://github.com/microsoft/vscode-extension-samples/tree/main/semantic-tokens-sample
Available token types:
    [comment] [string] [keyword] [number] [regexp] [operator] [namespace]
    [type] [struct] [class] [interface] [enum] [typeParameter] [function]
    [method] [macro] [variable] [parameter] [property] [label] [decorator]


Available token modifiers:
    [type.declaration] [type.documentation] [type.readonly] [type.static]
    [type.abstract] [type.deprecated] [type.modification] [type.async]

Some examples:
    [class.static.token]     [type.static.abstract]
    [class.static.token]     [type.static]

    [struct]

    [function.private]

    [support]

    [other]

An error case:
    [notInLegend]


VSC Token                            TextMate Fallback
namespace                        --> entity.name.namespace
type                             --> entity.name.type
type.defaultLibrary              --> support.type
struct                           --> storage.type.struct
class                            --> entity.name.type.class
class.defaultLibrary             --> support.class
interface                        --> entity.name.type.interface
enum                             --> entity.name.type.enum
function                         --> entity.name.function
function.defaultLibrary          --> support.function
method                           --> entity.name.function.member
macro                            --> entity.name.function.macro
variable                         --> variable.other.readwrite , entity.name.variable
variable.readonly                --> variable.other.constant
variable.readonly.defaultLibrary --> support.constant
parameter                        --> variable.parameter
property                         --> variable.other.property
property.readonly                --> variable.other.constant.property
enumMember                       --> variable.other.enummember
event                            --> variable.other.event
